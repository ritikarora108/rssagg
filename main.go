package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/go-chi/chi/v5"                          // HTTP router
	"github.com/go-chi/cors"                            // CORS middleware
	"github.com/joho/godotenv"                          // Environment variable loader
	_ "github.com/lib/pq"                               // PostgreSQL driver
	"github.com/ritikarora108/rssagg/internal/database" // Our database package
)

// apiConfig holds all the configuration for our API server
// This includes database connections and any other dependencies
type apiConfig struct {
	DB *database.Queries // Database queries interface generated by SQLC
}

func main() {
	// Load environment variables from .env file
	if err := godotenv.Load(); err != nil {
		log.Fatal("Error loading .env file")
	}

	fmt.Println("Rss Aggregator")

	// Get port from environment variable
	portString := os.Getenv("PORT")
	if portString == "" {
		log.Fatal("PORT is not set")
	}

	// Get database URL from environment variable
	dbURL := os.Getenv("DB_URL")
	if dbURL == "" {
		log.Fatal("DB_URL is not set")
	}

	// Open database connection
	conn, err := sql.Open("postgres", dbURL)
	if err != nil {
		log.Fatal("Cannot connect to db:", err)
	}

	// Create a new database queries instance
	queries := database.New(conn)

	// Initialize API configuration
	apiCfg := apiConfig{
		DB: queries,
	}

	// Create a new Chi router
	router := chi.NewRouter()

	// Configure CORS middleware
	router.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"https://*", "http://*"}, // Allow all origins
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300,
	}))

	// Create a sub-router for v1 API endpoints
	v1Router := chi.NewRouter()

	// Register API endpoints
	v1Router.Get("/healthz", HandlerReadiness)        // Health check endpoint
	v1Router.Get("/err", HandlerError)                // Error handling endpoint
	v1Router.Post("/users", apiCfg.HandlerCreateUser) // User creation endpoint
	v1Router.Get("/users", apiCfg.middlewareAuth(apiCfg.HandlerGetUser))     // User retrieval endpoint
	v1Router.Post("/feeds", apiCfg.middlewareAuth(apiCfg.HandlerCreateFeed)) // Feed creation endpoint
	v1Router.Get("/feeds", apiCfg.middlewareAuth(apiCfg.HandlerGetFeeds)) // Feed retrieval endpoint
	v1Router.Get("/feeds/all", apiCfg.HandlerGetAllFeeds) // Feed retrieval endpoint
	v1Router.Post("/feed_follows", apiCfg.middlewareAuth(apiCfg.HandlerCreateFeedFollow)) // Feed follow creation endpoint
	v1Router.Get("/feed_follows", apiCfg.middlewareAuth(apiCfg.HandlerGetFeedFollowsByUser)) // Feed follow retrieval endpoint
	v1Router.Delete("/feed_follows/{feedFollowID}", apiCfg.middlewareAuth(apiCfg.HandlerDeleteFeedFollow)) // Feed follow deletion endpoint

	// Mount v1 router under /v1 path
	router.Mount("/v1", v1Router)

	// Create HTTP server
	srv := &http.Server{
		Handler: router,
		Addr:    ":" + portString,
	}

	// Log server start
	log.Printf("Server starting on port %v", portString)

	// Start the server
	err = srv.ListenAndServe()
	if err != nil {
		log.Fatal(err)
	}
}
