package main

import (
	"database/sql" // Standard library for database operations
	"fmt"          // For formatted I/O
	"log"          // For logging
	"net/http"     // For HTTP server functionality
	"os"           // For environment variables and system operations
	"time"

	"github.com/go-chi/chi/v5"                          // HTTP router for handling routes
	"github.com/go-chi/cors"                            // Middleware for handling Cross-Origin Resource Sharing
	"github.com/joho/godotenv"                          // For loading environment variables from .env file
	_ "github.com/lib/pq"                               // PostgreSQL driver (imported for its init function)
	"github.com/ritikarora108/rssagg/internal/database" // Our database package with generated code
)

// apiConfig holds all the configuration for our API server
// This struct is used to pass dependencies to our HTTP handlers
type apiConfig struct {
	DB *database.Queries // Database queries interface generated by SQLC
}

func main() {
	// Load environment variables from .env file
	// This will set up our configuration like database URL and port
	if err := godotenv.Load(); err != nil {
		log.Fatal("Error loading .env file")
	}

	fmt.Println("Rss Aggregator")

	// Get port from environment variable
	// This is where our server will listen for incoming requests
	portString := os.Getenv("PORT")
	if portString == "" {
		log.Fatal("PORT is not set")
	}

	// Get database URL from environment variable
	// This is the connection string for our PostgreSQL database
	dbURL := os.Getenv("DB_URL")
	if dbURL == "" {
		log.Fatal("DB_URL is not set")
	}

	// Open database connection using the PostgreSQL driver
	// This establishes a connection pool to our database
	conn, err := sql.Open("postgres", dbURL)
	if err != nil {
		log.Fatal("Cannot connect to db:", err)
	}

	// Create a new database queries instance
	// This gives us type-safe database operations
	queries := database.New(conn)

	// Initialize API configuration with our database connection
	apiCfg := apiConfig{
		DB: queries,
	}

	go startScrapping(
		queries,
		10,
		time.Minute,
	)

	// Create a new Chi router
	// This will handle all our HTTP routing
	router := chi.NewRouter()

	// Configure CORS middleware
	// This allows our API to be accessed from different origins (domains)
	router.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"https://*", "http://*"},                                   // Allow all origins
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},                 // Allowed HTTP methods
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"}, // Allowed headers
		ExposedHeaders:   []string{"Link"},                                                    // Headers that can be exposed to the client
		AllowCredentials: false,                                                               // Don't allow credentials in CORS requests
		MaxAge:           300,                                                                 // Cache preflight requests for 5 minutes
	}))

	// Create a sub-router for v1 API endpoints
	// This helps us version our API
	v1Router := chi.NewRouter()

	// Register API endpoints
	v1Router.Get("/healthz", HandlerReadiness)                               // Health check endpoint
	v1Router.Get("/err", HandlerError)                                       // Error handling endpoint
	v1Router.Post("/users", apiCfg.HandlerCreateUser)                        // User creation endpoint
	v1Router.Get("/users", apiCfg.middlewareAuth(apiCfg.HandlerGetUser))     // User retrieval endpoint
	v1Router.Post("/feeds", apiCfg.middlewareAuth(apiCfg.HandlerCreateFeed)) // Feed creation endpoint
	v1Router.Get("/feeds", apiCfg.middlewareAuth(apiCfg.HandlerGetFeeds))    // Feed retrieval endpoint
	// v1Router.Get("/feeds/all", apiCfg.HandlerGetAllFeeds) // All Feeds retrieval endpoint
	v1Router.Post("/feed_follows", apiCfg.middlewareAuth(apiCfg.HandlerCreateFeedFollow))                  // Feed follow creation endpoint
	v1Router.Get("/feed_follows", apiCfg.middlewareAuth(apiCfg.HandlerGetFeedFollowsByUser))               // Feed follow retrieval endpoint
	v1Router.Delete("/feed_follows/{feedFollowID}", apiCfg.middlewareAuth(apiCfg.HandlerDeleteFeedFollow)) // Feed follow deletion endpoint
	v1Router.Get("/posts", apiCfg.middlewareAuth(apiCfg.HandlerGetPostsForUser))                           // Post retrieval endpoint

	// Mount v1 router under /v1 path
	// All v1 endpoints will be prefixed with /v1
	router.Mount("/v1", v1Router)

	// Create HTTP server with our router
	srv := &http.Server{
		Handler: router,           // Use our configured router
		Addr:    ":" + portString, // Listen on the specified port
	}

	// Log server start
	log.Printf("Server starting on port %v", portString)

	// Start the server and listen for incoming requests
	err = srv.ListenAndServe()
	if err != nil {
		log.Fatal(err)
	}
}
